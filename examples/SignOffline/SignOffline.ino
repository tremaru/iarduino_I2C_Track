// ПРИМЕР ОТПРАВКИ ИНФОРМАЦИИ О ЗНАКЕ:  // * Строки со звёздочкой являются необязательными.
                                        //
#include <Wire.h>                       // * Подключаем библиотеку для работы с аппаратной шиной I2C.
#include <iarduino_I2C_Track.h>         //   Подключаем библиотеку для работы с модулями трассы I2C-flash.
iarduino_I2C_Track sign(0x09);          //   Объявляем объект sign для работы с функциями и методами библиотеки iarduino_I2C_Track, указывая адрес модуля на шине I2C.
                                        //   Если объявить объект без указания адреса (iarduino_I2C_Track sign;), то адрес будет найден автоматически.
void setup(){                           //
     delay(500);                        // * Ждём завершение переходных процессов связанных с подачей питания.
     sign.begin(MODUL_SIGN, 2,4    );   //   Инициируем работу с модулем. Указываем что модуль является знаком 2.4 ПДД "Уступите дорогу".
//   sign.begin(MODUL_SIGN, 6,8,2  );   //   Инициируем работу с модулем. Указываем что модуль является знаком 6.8.2 ПДД "Тупик" (справа).
//   sign.begin(MODUL_SIGN, 3,24, 5);   //   Инициируем работу с модулем. Указываем что модуль является знаком 3.24 ПДД "Ограничение максимальной скорости", последняя цифра (0-15) указывает скорость (5 = 50км/ч).
     sign.irProtocol(IR_IARDUINO);      // * Указываем протокол передачи данных по ИК-каналу: "IARDUINO".
     sign.backlight(true);              // * Включаем подсветку знака.
     sign.indicator(true);              // * Разрешаем работу светодиода информирующего об отправке данных.
     sign.irAutoSend();                 //   Указываем модулю постоянно отправлять информацию о знаке по ИК-каналу с паузой между пакетами определённой ИК протоколом по умолчанию ±50%.
//   sign.irAutoSend(100);              //   Указываем модулю постоянно отправлять информацию о знаке по ИК-каналу с паузой между пакетами в 100 мс ±50%.
     sign.offline(true);                //   Указываем модулю сохранить все полученные настройки в энергонезависимую память и работать в автономном режиме.
}                                       //   В автономном режиме модуль начинает работать сразу после подачи питания, без получения команд от Arduino.
                                        //   Отключить автономный режим можно функцией offline() с параметром false.
void loop(){                            //
}                                       //
